export default class TechnicalAnalyzer {
    analyze(doc, url) {
        const analyses = {
            language: this.analyzeLanguage(doc),
            favicon: this.analyzeFavicon(doc),
            schema: this.analyzeSchemaMarkup(doc),
            social: this.analyzeSocialLinks(doc),
            structure: this.analyzeStructure(doc),
            performance: this.analyzePerformance(doc),
            security: this.analyzeSecurity(doc),
            metaTags: this.analyzeMetaTags(doc),
            scripts: this.analyzeScripts(doc),
            links: this.analyzeTechnicalLinks(doc),
            accessibility: this.analyzeAccessibility(doc),
            seo: this.analyzeTechnicalSEO(doc, url)
        };

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é –æ—Ü–µ–Ω–∫—É
        const overallScore = this.calculateOverallScore(analyses);

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        const recommendations = this.generateTechnicalRecommendations(analyses, overallScore);

        return {
            ...analyses,
            score: overallScore,
            grade: this.getTechnicalGrade(overallScore),
            recommendations: recommendations
        };
    }

    calculateOverallScore(analyses) {
        const weights = {
            language: 0.08,        // –Ø–∑—ã–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞
            favicon: 0.05,         // –§–∞–≤–∏–∫–æ–Ω
            schema: 0.15,          // Schema markup
            structure: 0.12,       // –°—Ç—Ä—É–∫—Ç—É—Ä–∞ HTML
            performance: 0.10,     // –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∞—Å–ø–µ–∫—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            security: 0.10,        // –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
            metaTags: 0.12,        // –ú–µ—Ç–∞-—Ç–µ–≥–∏
            scripts: 0.08,         // –°–∫—Ä–∏–ø—Ç—ã
            links: 0.05,           // –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å—Å—ã–ª–∫–∏
            accessibility: 0.08,   // –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
            seo: 0.07              // –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ SEO
        };

        const scores = {
            language: this.calculateLanguageScore(analyses.language),
            favicon: this.calculateFaviconScore(analyses.favicon),
            schema: this.calculateSchemaScore(analyses.schema),
            structure: analyses.structure.score,
            performance: this.calculatePerformanceScore(analyses.performance),
            security: this.calculateSecurityScore(analyses.security),
            metaTags: this.calculateMetaTagsScore(analyses.metaTags),
            scripts: this.calculateScriptsScore(analyses.scripts),
            links: this.calculateLinksScore(analyses.links),
            accessibility: this.calculateAccessibilityScore(analyses.accessibility),
            seo: this.calculateTechnicalSEOScore(analyses.seo)
        };

        // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–∏–π –≤–∑–≤–µ—à–µ–Ω–Ω—ã–π –±–∞–ª–ª
        let totalScore = 0;
        Object.entries(weights).forEach(([category, weight]) => {
            totalScore += scores[category] * weight;
        });

        return Math.max(0, Math.min(100, Math.round(totalScore)));
    }

    // üîß –ú–µ—Ç–æ–¥—ã —Ä–∞—Å—á–µ—Ç–∞ –æ—Ü–µ–Ω–æ–∫ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

    calculateLanguageScore(languageAnalysis) {
        let score = 0;
        if (languageAnalysis.exists) score += 70;
        if (languageAnalysis.valid) score += 30;
        return score;
    }

    calculateFaviconScore(faviconAnalysis) {
        if (!faviconAnalysis.exists) return 0;
        let score = 50; // –ë–∞–∑–æ–≤—ã–π –±–∞–ª–ª –∑–∞ –Ω–∞–ª–∏—á–∏–µ
        
        if (faviconAnalysis.hasAppleTouch) score += 25;
        if (faviconAnalysis.count > 1) score += 15; // –ù–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑–º–µ—Ä–æ–≤
        if (faviconAnalysis.icons.some(icon => icon.sizes)) score += 10;
        
        return Math.min(score, 100);
    }

    calculateSchemaScore(schemaAnalysis) {
        if (schemaAnalysis.count === 0) return 0;
        
        let score = 0;
        
        // –ë–∞–ª–ª—ã –∑–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
        score += Math.min(schemaAnalysis.validCount * 15, 40);
        
        // –ë–∞–ª–ª—ã –∑–∞ –ø–æ–∫—Ä—ã—Ç–∏–µ –≤–∞–∂–Ω—ã—Ö —Ç–∏–ø–æ–≤
        const essentialTypes = ['Organization', 'WebSite', 'BreadcrumbList'];
        const foundEssential = essentialTypes.filter(type => 
            schemaAnalysis.foundCommonTypes.includes(type)
        ).length;
        
        score += foundEssential * 20;
        
        // –ë–æ–Ω—É—Å –∑–∞ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ
        if (schemaAnalysis.diversity >= 3) score += 10;
        
        return Math.min(score, 100);
    }

    calculatePerformanceScore(performanceAnalysis) {
        let score = 100;
        
        // –®—Ç—Ä–∞—Ñ—ã –∑–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é
        const scripts = performanceAnalysis.scripts;
        const styles = performanceAnalysis.styles;
        const images = performanceAnalysis.images;
        
        // –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã
        if (scripts.sync > 3) score -= 10;
        if (scripts.sync > 5) score -= 10;
        
        // –í–Ω–µ—à–Ω–∏–µ —Å—Ç–∏–ª–∏
        if (styles.external > 5) score -= 5;
        
        // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–µ–∑ —Ä–∞–∑–º–µ—Ä–æ–≤
        const imagesWithoutDimensions = images.count - images.withDimensions;
        if (imagesWithoutDimensions > 5) score -= 10;
        
        // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–µ–∑ lazy loading
        if (images.lazy / images.count < 0.3) score -= 10;
        
        return Math.max(0, score);
    }

    calculateSecurityScore(securityAnalysis) {
        let score = 100;
        
        // CSP
        if (!securityAnalysis.csp.exists) score -= 20;
        
        // –ù–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Ñ–æ—Ä–º—ã
        const insecureForms = securityAnalysis.forms.count - securityAnalysis.forms.secure;
        if (insecureForms > 0) score -= insecureForms * 5;
        
        // –í–Ω–µ—à–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç—ã
        if (securityAnalysis.externalScripts.count > 10) score -= 10;
        
        return Math.max(0, score);
    }

    calculateMetaTagsScore(metaTagsAnalysis) {
        let score = 0;
        
        // –ë–∞–∑–æ–≤—ã–µ –º–µ—Ç–∞-—Ç–µ–≥–∏
        if (metaTagsAnalysis.basic.viewport) score += 20;
        if (metaTagsAnalysis.basic.description) score += 15;
        if (metaTagsAnalysis.basic.robots) score += 10;
        
        // Open Graph
        if (metaTagsAnalysis.hasOG) score += 25;
        
        // Twitter Cards
        if (metaTagsAnalysis.hasTwitter) score += 15;
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–∞–ª–ª—ã –∑–∞ –ø–æ–ª–Ω–æ—Ç—É
        const ogTags = Object.keys(metaTagsAnalysis.openGraph).length;
        if (ogTags >= 4) score += 15;
        
        return Math.min(score, 100);
    }

    calculateScriptsScore(scriptsAnalysis) {
        let score = 100;
        
        // –®—Ç—Ä–∞—Ñ—ã –∑–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å–æ —Å–∫—Ä–∏–ø—Ç–∞–º–∏
        if (scriptsAnalysis.inline > 5) score -= 10;
        if (scriptsAnalysis.external > 15) score -= 10;
        
        // –ë–æ–Ω—É—Å—ã –∑–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        const totalScripts = scriptsAnalysis.total;
        if (totalScripts > 0) {
            const asyncDeferRatio = (scriptsAnalysis.async + scriptsAnalysis.defer) / totalScripts;
            if (asyncDeferRatio > 0.5) score += 10;
        }
        
        return Math.max(0, Math.min(100, score));
    }

    calculateLinksScore(linksAnalysis) {
        let score = 0;
        
        if (linksAnalysis.hasCanonical) score += 30;
        if (linksAnalysis.hasPreload) score += 20;
        if (linksAnalysis.hasPreconnect) score += 15;
        if (linksAnalysis.hasDNS) score += 10;
        
        // –ë–æ–Ω—É—Å –∑–∞ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ —Ç–∏–ø–æ–≤ —Å—Å—ã–ª–æ–∫
        const linkTypesCount = Object.keys(linksAnalysis.types).length;
        if (linkTypesCount >= 3) score += 25;
        
        return Math.min(score, 100);
    }

    calculateAccessibilityScore(accessibilityAnalysis) {
        let score = 0;
        
        // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å alt
        if (accessibilityAnalysis.images.total > 0) {
            const altRatio = accessibilityAnalysis.images.withAlt / accessibilityAnalysis.images.total;
            score += Math.round(altRatio * 40);
        }
        
        // –§–æ—Ä–º—ã —Å labels
        if (accessibilityAnalysis.forms.total > 0) {
            const labelsRatio = accessibilityAnalysis.forms.withLabels / accessibilityAnalysis.forms.total;
            score += Math.round(labelsRatio * 30);
        }
        
        // –õ–µ–Ω–¥–º–∞—Ä–∫–∏
        const landmarks = accessibilityAnalysis.landmarks;
        const landmarkCount = Object.values(landmarks).filter(Boolean).length;
        score += landmarkCount * 10;
        
        // –Ø–∑—ã–∫
        if (accessibilityAnalysis.language.defined) score += 10;
        
        return Math.min(score, 100);
    }

    calculateTechnicalSEOScore(seoAnalysis) {
        let score = 0;
        
        if (seoAnalysis.canonical.exists) score += 30;
        if (seoAnalysis.canonical.matchesCurrent) score += 20;
        
        if (seoAnalysis.robots.exists) score += 15;
        if (seoAnalysis.robots.allowsIndex) score += 15;
        
        if (seoAnalysis.hreflang.exists) score += 20;
        
        return Math.min(score, 100);
    }

    getTechnicalGrade(score) {
        if (score >= 90) return 'A';
        if (score >= 80) return 'B';
        if (score >= 70) return 'C';
        if (score >= 60) return 'D';
        return 'F';
    }

    generateTechnicalRecommendations(analyses) {
        const recommendations = [];
        
        // –Ø–∑—ã–∫
        if (!analyses.language.exists) {
            recommendations.push('–î–æ–±–∞–≤—å—Ç–µ –∞—Ç—Ä–∏–±—É—Ç lang –∫ —Ç–µ–≥—É <html>');
        }
        
        // Schema markup
        if (analyses.schema.count === 0) {
            recommendations.push('–î–æ–±–∞–≤—å—Ç–µ schema markup –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è SEO');
        } else if (analyses.schema.validCount < analyses.schema.count) {
            recommendations.push('–ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –≤ schema markup');
        }
        
        // –°—Ç—Ä—É–∫—Ç—É—Ä–∞
        if (!analyses.structure.header.exists) {
            recommendations.push('–î–æ–±–∞–≤—å—Ç–µ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π <header>');
        }
        if (!analyses.structure.main.exists) {
            recommendations.push('–î–æ–±–∞–≤—å—Ç–µ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π <main>');
        }
        
        // –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
        if (!analyses.security.csp.exists) {
            recommendations.push('–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ Content Security Policy');
        }
        
        // Open Graph
        if (!analyses.metaTags.hasOG) {
            recommendations.push('–î–æ–±–∞–≤—å—Ç–µ Open Graph —Ä–∞–∑–º–µ—Ç–∫—É –¥–ª—è —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π');
        }
        
        return recommendations.slice(0, 5); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 5 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
    }

    analyzeLanguage(doc) {
        const lang = doc.documentElement.getAttribute('lang');
        const validLanguages = ['ru', 'en', 'de', 'fr', 'es', 'it', 'zh', 'ja', 'ko'];
        
        return {
            exists: !!lang,
            value: lang || '–ù–µ —É–∫–∞–∑–∞–Ω',
            valid: validLanguages.some(validLang => lang && lang.startsWith(validLang)),
            direction: doc.documentElement.getAttribute('dir') || 'ltr'
        };
    }

    analyzeFavicon(doc) {
        const favicons = doc.querySelectorAll('link[rel*="icon"]');
        const icons = Array.from(favicons).map(icon => ({
            rel: icon.getAttribute('rel'),
            href: icon.getAttribute('href'),
            sizes: icon.getAttribute('sizes'),
            type: icon.getAttribute('type')
        }));

        return {
            exists: favicons.length > 0,
            count: favicons.length,
            icons: icons,
            hasAppleTouch: doc.querySelector('link[rel="apple-touch-icon"]') !== null,
            hasMaskIcon: doc.querySelector('link[rel="mask-icon"]') !== null
        };
    }

    analyzeSchemaMarkup(doc) {
        const schemas = doc.querySelectorAll('script[type="application/ld+json"]');
        const foundSchemas = [];
        let validCount = 0;
        
        schemas.forEach(schema => {
            try {
                const data = JSON.parse(schema.textContent);
                const isValid = this.validateSchema(data);
                if (isValid) validCount++;
                
                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å—Ö–µ–º—ã (–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–∞—Å—Å–∏–≤—ã –∏ –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã)
                let schemaType = 'Unknown';
                if (Array.isArray(data)) {
                    schemaType = 'Array';
                } else if (data['@type']) {
                    if (Array.isArray(data['@type'])) {
                        schemaType = data['@type'].join(', ');
                    } else {
                        schemaType = data['@type'];
                    }
                }
                
                foundSchemas.push({
                    type: schemaType,
                    valid: isValid,
                    context: data['@context'],
                    data: this.simplifySchemaData(data)
                });
            } catch (e) {
                foundSchemas.push({ 
                    type: 'Invalid JSON', 
                    valid: false,
                    error: e.message 
                });
            }
        });

        const commonTypes = ['Organization', 'WebSite', 'Article', 'Product', 'BreadcrumbList', 'LocalBusiness'];
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º commonTypes –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å—Ö–µ–º
        const foundTypes = new Set();
        foundSchemas.forEach(schema => {
            commonTypes.forEach(type => {
                if (schema.type && schema.type.includes(type)) {
                    foundTypes.add(type);
                }
            });
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å—Ö–µ–º
        const hasOrganization = foundTypes.has('Organization');
        const hasBreadcrumb = foundTypes.has('BreadcrumbList');
        const hasWebsite = foundTypes.has('WebSite');
        const hasArticle = foundTypes.has('Article');
        const hasProduct = foundTypes.has('Product');
        const hasLocalBusiness = foundTypes.has('LocalBusiness');
        
        return {
            count: schemas.length,
            validCount: validCount,
            schemas: foundSchemas,
            hasOrganization: hasOrganization,
            hasBreadcrumb: hasBreadcrumb,
            hasWebsite: hasWebsite,
            hasArticle: hasArticle,
            hasProduct: hasProduct,
            hasLocalBusiness: hasLocalBusiness,
            coverage: schemas.length > 0 ? Math.round((validCount / schemas.length) * 100) : 0,
            diversity: foundTypes.size, // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∏–∑ commonTypes
            foundCommonTypes: Array.from(foundTypes) // –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤
        };
    }

    analyzeSocialLinks(doc) {
        const socialLinks = {};
        const socialPatterns = {
            facebook: ['facebook.com', 'fb.com'],
            twitter: ['twitter.com', 'x.com'],
            instagram: ['instagram.com'],
            linkedin: ['linkedin.com'],
            youtube: ['youtube.com', 'youtu.be'],
            telegram: ['t.me', 'telegram.me'],
            vk: ['vk.com', 'vkontakte.ru'],
            whatsapp: ['wa.me', 'whatsapp.com'],
            tiktok: ['tiktok.com']
        };
        
        doc.querySelectorAll('a[href]').forEach(link => {
            const href = link.getAttribute('href');
            if (!href) return;
            
            Object.entries(socialPatterns).forEach(([platform, patterns]) => {
                patterns.forEach(pattern => {
                    if (href.includes(pattern)) {
                        if (!socialLinks[platform]) {
                            socialLinks[platform] = [];
                        }
                        socialLinks[platform].push({
                            url: href,
                            text: link.textContent.trim(),
                            nofollow: link.getAttribute('rel')?.includes('nofollow') || false
                        });
                    }
                });
            });
        });
        
        return {
            platforms: Object.keys(socialLinks).length,
            links: socialLinks,
            total: Object.values(socialLinks).flat().length
        };
    }

    analyzeStructure(doc) {
        const structure = {
            header: this.analyzeHeader(doc),
            nav: this.analyzeNavigation(doc),
            main: this.analyzeMain(doc),
            footer: this.analyzeFooter(doc),
            semantic: this.analyzeSemanticElements(doc),
            breadcrumbs: this.analyzeBreadcrumbs(doc),
            forms: this.analyzeForms(doc)
        };
        
        structure.score = this.calculateStructureScore(structure);
        return structure;
    }

    analyzeHeader(doc) {
        const header = doc.querySelector('header');
        return {
            exists: !!header,
            multiple: doc.querySelectorAll('header').length > 1,
            hasH1: header ? header.querySelector('h1') !== null : false,
            hasNav: header ? header.querySelector('nav') !== null : false
        };
    }

    analyzeNavigation(doc) {
        const navs = doc.querySelectorAll('nav');
        return {
            exists: navs.length > 0,
            count: navs.length,
            hasList: Array.from(navs).some(nav => nav.querySelector('ul, ol') !== null),
            hasLinks: Array.from(navs).some(nav => nav.querySelector('a[href]') !== null)
        };
    }

    analyzeMain(doc) {
        const main = doc.querySelector('main');
        return {
            exists: !!main,
            multiple: doc.querySelectorAll('main').length > 1,
            hasH1: main ? main.querySelector('h1') !== null : false,
            hasArticle: main ? main.querySelector('article') !== null : false
        };
    }

    analyzeFooter(doc) {
        const footer = doc.querySelector('footer');
        return {
            exists: !!footer,
            multiple: doc.querySelectorAll('footer').length > 1,
            hasLinks: footer ? footer.querySelector('a[href]') !== null : false,
            hasSocial: footer ? this.hasSocialLinks(footer) : false
        };
    }

    analyzeForms(doc) {
        const forms = doc.querySelectorAll('form');
        const analyzedForms = Array.from(forms).map(form => ({
            hasSubmit: form.querySelector('[type="submit"]') !== null,
            hasLabels: form.querySelector('label') !== null,
            method: form.getAttribute('method') || 'GET',
            action: form.getAttribute('action') || '',
            inputs: form.querySelectorAll('input, textarea, select').length
        }));

        return {
            count: forms.length,
            forms: analyzedForms,
            hasContactForm: this.hasContactForm(forms)
        };
    }

    analyzePerformance(doc) {
        const scripts = doc.querySelectorAll('script');
        const styles = doc.querySelectorAll('link[rel="stylesheet"], style');
        const images = doc.querySelectorAll('img');
        
        return {
            scripts: {
                count: scripts.length,
                sync: Array.from(scripts).filter(s => !s.async && !s.defer).length,
                async: Array.from(scripts).filter(s => s.async).length,
                defer: Array.from(scripts).filter(s => s.defer).length,
                external: Array.from(scripts).filter(s => s.src).length
            },
            styles: {
                count: styles.length,
                inline: Array.from(styles).filter(s => s.tagName === 'STYLE').length,
                external: Array.from(styles).filter(s => s.href).length
            },
            images: {
                count: images.length,
                withDimensions: Array.from(images).filter(img => 
                    img.width || img.height || img.hasAttribute('width') || img.hasAttribute('height')
                ).length,
                lazy: Array.from(images).filter(img => 
                    img.loading === 'lazy' || img.hasAttribute('data-lazy')
                ).length
            }
        };
    }

    analyzeSecurity(doc) {
        const meta = doc.querySelector('meta[http-equiv="Content-Security-Policy"]');
        const forms = doc.querySelectorAll('form');
        
        return {
            csp: {
                exists: !!meta,
                value: meta ? meta.getAttribute('content') : ''
            },
            forms: {
                count: forms.length,
                secure: Array.from(forms).filter(form => {
                    const action = form.getAttribute('action') || '';
                    return action.startsWith('https://') || action.startsWith('//') || !action.includes('http');
                }).length,
                hasCaptcha: Array.from(forms).some(form => 
                    form.innerHTML.includes('g-recaptcha') || 
                    form.querySelector('[class*="captcha"]')
                )
            },
            externalScripts: {
                count: Array.from(doc.querySelectorAll('script[src]')).filter(s => {
                    const src = s.getAttribute('src');
                    return src && !src.startsWith('/') && !src.includes(window.location.hostname);
                }).length
            }
        };
    }

    analyzeMetaTags(doc) {
        const metaTags = {};
        const importantMeta = [
            'viewport', 'description', 'keywords', 'robots', 'generator',
            'author', 'theme-color', 'msapplication-TileColor'
        ];
        
        importantMeta.forEach(name => {
            const meta = doc.querySelector(`meta[name="${name}"]`);
            if (meta) {
                metaTags[name] = meta.getAttribute('content');
            }
        });

        // Open Graph
        const ogTags = {};
        doc.querySelectorAll('meta[property^="og:"]').forEach(meta => {
            const property = meta.getAttribute('property').replace('og:', '');
            ogTags[property] = meta.getAttribute('content');
        });

        // Twitter Cards
        const twitterTags = {};
        doc.querySelectorAll('meta[name^="twitter:"]').forEach(meta => {
            const name = meta.getAttribute('name').replace('twitter:', '');
            twitterTags[name] = meta.getAttribute('content');
        });

        return {
            basic: metaTags,
            openGraph: ogTags,
            twitter: twitterTags,
            hasOG: Object.keys(ogTags).length > 0,
            hasTwitter: Object.keys(twitterTags).length > 0
        };
    }

    analyzeScripts(doc) {
        const scripts = doc.querySelectorAll('script');
        const analyzed = Array.from(scripts).map(script => ({
            src: script.getAttribute('src'),
            async: script.async,
            defer: script.defer,
            type: script.getAttribute('type'),
            module: script.getAttribute('type') === 'module'
        }));

        return {
            total: scripts.length,
            inline: analyzed.filter(s => !s.src).length,
            external: analyzed.filter(s => s.src).length,
            async: analyzed.filter(s => s.async).length,
            defer: analyzed.filter(s => s.defer).length,
            modules: analyzed.filter(s => s.module).length
        };
    }

    analyzeTechnicalLinks(doc) {
        const links = doc.querySelectorAll('link[rel]');
        const linkTypes = {};
        
        links.forEach(link => {
            const rel = link.getAttribute('rel');
            if (!linkTypes[rel]) {
                linkTypes[rel] = [];
            }
            linkTypes[rel].push({
                href: link.getAttribute('href'),
                type: link.getAttribute('type'),
                sizes: link.getAttribute('sizes')
            });
        });

        return {
            total: links.length,
            types: linkTypes,
            hasPreload: !!linkTypes.preload,
            hasPreconnect: !!linkTypes.preconnect,
            hasDNS: !!linkTypes['dns-prefetch'],
            hasCanonical: !!linkTypes.canonical
        };
    }

    analyzeAccessibility(doc) {
        const images = doc.querySelectorAll('img');
        const forms = doc.querySelectorAll('form');
        
        return {
            images: {
                withAlt: Array.from(images).filter(img => 
                    img.alt && img.alt.trim() !== ''
                ).length,
                total: images.length
            },
            forms: {
                withLabels: Array.from(forms).filter(form => 
                    form.querySelector('label')
                ).length,
                total: forms.length
            },
            landmarks: {
                hasMain: !!doc.querySelector('main'),
                hasHeader: !!doc.querySelector('header'),
                hasFooter: !!doc.querySelector('footer'),
                hasNav: !!doc.querySelector('nav')
            },
            language: {
                defined: !!doc.documentElement.getAttribute('lang')
            }
        };
    }

    analyzeTechnicalSEO(doc, url) {
        const canonical = doc.querySelector('link[rel="canonical"]');
        const robots = doc.querySelector('meta[name="robots"]');
        
        return {
            canonical: {
                exists: !!canonical,
                url: canonical ? canonical.getAttribute('href') : '',
                matchesCurrent: canonical ? 
                    this.normalizeUrl(canonical.getAttribute('href')) === this.normalizeUrl(url) : false
            },
            robots: {
                exists: !!robots,
                content: robots ? robots.getAttribute('content') : '',
                allowsIndex: robots ? !robots.getAttribute('content')?.includes('noindex') : true,
                allowsFollow: robots ? !robots.getAttribute('content')?.includes('nofollow') : true
            },
            hreflang: {
                exists: doc.querySelector('link[rel="alternate"][hreflang]') !== null,
                count: doc.querySelectorAll('link[rel="alternate"][hreflang]').length
            }
        };
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    analyzeSemanticElements(doc) {
        const semanticTags = ['header', 'nav', 'main', 'footer', 'article', 'section', 'aside', 'figure', 'time'];
        const result = {};
        semanticTags.forEach(tag => {
            result[tag] = doc.querySelectorAll(tag).length;
        });
        return result;
    }

    analyzeBreadcrumbs(doc) {
        const breadcrumbs = doc.querySelector('[aria-label="breadcrumb"], .breadcrumbs, .breadcrumb');
        
        // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ Schema.org BreadcrumbList
        let hasSchema = false;
        const schemaScripts = doc.querySelectorAll('script[type="application/ld+json"]');
        
        schemaScripts.forEach(script => {
            try {
                const data = JSON.parse(script.textContent);
                if (data['@type'] === 'BreadcrumbList' || 
                    (Array.isArray(data['@type']) && data['@type'].includes('BreadcrumbList')) ||
                    (data['@type'] === 'WebPage' && data.breadcrumb)) {
                    hasSchema = true;
                }
            } catch (e) {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON
            }
        });

        return {
            exists: !!breadcrumbs,
            elements: breadcrumbs ? breadcrumbs.querySelectorAll('*').length : 0,
            hasSchema: hasSchema
        };
    }

    hasSocialLinks(element) {
        const socialPatterns = ['facebook', 'twitter', 'instagram', 'linkedin', 'youtube'];
        const links = element.querySelectorAll('a[href]');
        return Array.from(links).some(link => {
            const href = link.getAttribute('href');
            return socialPatterns.some(pattern => href && href.includes(pattern));
        });
    }

    hasContactForm(forms) {
        return Array.from(forms).some(form => {
            const html = form.innerHTML.toLowerCase();
            return html.includes('contact') || html.includes('message') || html.includes('email');
        });
    }

    simplifySchemaData(data) {
        const simple = {};
        
        if (Array.isArray(data)) {
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–∞—Å—Å–∏–≤—ã —Å—Ö–µ–º
            simple.items = data.length;
            if (data[0] && data[0]['@type']) {
                simple.types = data.map(item => item['@type']).filter(Boolean).join(', ');
            }
            return simple;
        }
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–¥–∏–Ω–æ—á–Ω—ã–µ —Å—Ö–µ–º—ã
        if (data.name) simple.name = data.name;
        if (data.url) simple.url = data.url;
        if (data.description) simple.description = data.description;
        if (data.headline) simple.headline = data.headline;
        
        // –î–ª—è BreadcrumbList
        if (data['@type'] === 'BreadcrumbList' && data.itemListElement) {
            simple.breadcrumbs = data.itemListElement.length;
        }
        
        // –î–ª—è Organization
        if (data['@type'] === 'Organization' && data.logo) {
            simple.hasLogo = true;
        }
        
        return simple;
    }

    validateSchema(schema) {
        // –ë–∞–∑–æ–≤—ã–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        const hasContext = '@context' in schema;
        const hasType = '@type' in schema;
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        if (hasContext && hasType) {
            const context = schema['@context'];
            const type = schema['@type'];
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å @context
            if (context !== 'https://schema.org' && context !== 'http://schema.org') {
                return false;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ @type –Ω–µ –ø—É—Å—Ç–æ–π
            if (!type || (typeof type === 'string' && type.trim() === '')) {
                return false;
            }
            
            return true;
        }
        
        return false;
    }

    normalizeUrl(url) {
        return url.replace(/https?:\/\//, '').replace(/\/$/, '');
    }

    calculateStructureScore(structure) {
        let score = 0;
        if (structure.header.exists) score += 20;
        if (structure.nav.exists) score += 20;
        if (structure.main.exists) score += 20;
        if (structure.footer.exists) score += 20;
        if (structure.breadcrumbs.exists) score += 10;
        if (structure.semantic.article > 0) score += 10;
        return Math.min(score, 100);
    }

    generateTechnicalRecommendations(analyses, overallScore) {
        const recommendations = [];

        // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —è–∑—ã–∫—É
        if (!analyses.language.exists) {
            recommendations.push({
                id: 'tech-no-language',
                title: '–ù–µ —É–∫–∞–∑–∞–Ω —è–∑—ã–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã',
                description: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∞—Ç—Ä–∏–±—É—Ç lang —É —Ç–µ–≥–∞ html, —á—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∏ SEO.',
                suggestion: '–î–æ–±–∞–≤—å—Ç–µ –∞—Ç—Ä–∏–±—É—Ç lang —Å –∫–æ–¥–æ–º —è–∑—ã–∫–∞ –∫ —Ç–µ–≥—É html.',
                priority: 'critical',
                impact: 8,
                category: 'accessibility',
                examples: '<html lang="ru">'
            });
        } else if (!analyses.language.valid) {
            recommendations.push({
                id: 'tech-invalid-language',
                title: '–ù–µ–≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–Ω —è–∑—ã–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã',
                description: `–£–∫–∞–∑–∞–Ω —è–∑—ã–∫ "${analyses.language.value}", –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º.`,
                suggestion: '–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–¥ —è–∑—ã–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "ru" –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ).',
                priority: 'warning',
                impact: 6,
                category: 'accessibility'
            });
        }

        // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ñ–∞–≤–∏–∫–æ–Ω–∫–µ
        if (!analyses.favicon.exists) {
            recommendations.push({
                id: 'tech-no-favicon',
                title: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ñ–∞–≤–∏–∫–æ–Ω–∫–∞',
                description: '–°–∞–π—Ç –Ω–µ –∏–º–µ–µ—Ç —Ñ–∞–≤–∏–∫–æ–Ω–∫–∏, —á—Ç–æ —É—Ö—É–¥—à–∞–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω–æ–µ –≤–æ—Å–ø—Ä–∏—è—Ç–∏–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ.',
                suggestion: '–î–æ–±–∞–≤—å—Ç–µ —Ñ–∞–≤–∏–∫–æ–Ω–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ ICO, PNG –∏–ª–∏ SVG.',
                priority: 'info',
                impact: 4,
                category: 'usability',
                examples: '<link rel="icon" type="image/x-icon" href="/favicon.ico">'
            });
        }

        // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ Schema.org —Ä–∞–∑–º–µ—Ç–∫–µ
        if (analyses.schema.count === 0) {
            recommendations.push({
                id: 'tech-no-schema',
                title: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç Schema.org —Ä–∞–∑–º–µ—Ç–∫–∞',
                description: '–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, —á—Ç–æ —É–ø—É—Å–∫–∞–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è SEO.',
                suggestion: '–î–æ–±–∞–≤—å—Ç–µ Schema.org —Ä–∞–∑–º–µ—Ç–∫—É –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è, —Å—Ç–∞—Ç—å—è, –ø—Ä–æ–¥—É–∫—Ç –∏ —Ç.–¥.).',
                priority: 'warning',
                impact: 7,
                category: 'seo',
                examples: '<script type="application/ld+json">{"@context":"https://schema.org","@type":"Organization","name":"–ö–æ–º–ø–∞–Ω–∏—è"}</script>'
            });
        } else if (analyses.schema.validCount < analyses.schema.count) {
            recommendations.push({
                id: 'tech-invalid-schema',
                title: '–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤ Schema.org —Ä–∞–∑–º–µ—Ç–∫–µ',
                description: `${analyses.schema.count - analyses.schema.validCount} –∏–∑ ${analyses.schema.count} —Å—Ö–µ–º —Å–æ–¥–µ—Ä–∂–∞—Ç –æ—à–∏–±–∫–∏.`,
                suggestion: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å JSON-LD —Ä–∞–∑–º–µ—Ç–∫–∏ —Å –ø–æ–º–æ—â—å—é –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ Google Rich Results Test.',
                priority: 'warning',
                impact: 6,
                category: 'seo'
            });
        }

        // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ—Å–Ω–æ–≤–Ω—ã–º —Ç–∏–ø–∞–º Schema
        if (!analyses.schema.hasOrganization) {
            recommendations.push({
                id: 'tech-no-org-schema',
                title: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ä–∞–∑–º–µ—Ç–∫–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏',
                description: '–ù–µ—Ç Schema.org —Ä–∞–∑–º–µ—Ç–∫–∏ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏, —á—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ SEO –∏ –∑–Ω–∞–Ω–∏–π–≥—Ä–∞—Ñ–∏–∫–∏.',
                suggestion: '–î–æ–±–∞–≤—å—Ç–µ —Ä–∞–∑–º–µ—Ç–∫—É Organization —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–æ–º–ø–∞–Ω–∏–∏.',
                priority: 'info',
                impact: 5,
                category: 'seo'
            });
        }

        if (!analyses.schema.hasWebsite) {
            recommendations.push({
                id: 'tech-no-website-schema',
                title: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ä–∞–∑–º–µ—Ç–∫–∞ –≤–µ–±-—Å–∞–π—Ç–∞',
                description: '–ù–µ—Ç Schema.org —Ä–∞–∑–º–µ—Ç–∫–∏ –¥–ª—è –≤–µ–±-—Å–∞–π—Ç–∞, —á—Ç–æ –º–æ–∂–µ—Ç —É–ª—É—á—à–∏—Ç—å –ø–æ–∏—Å–∫–æ–≤—É—é –≤—ã–¥–∞—á—É.',
                suggestion: '–î–æ–±–∞–≤—å—Ç–µ —Ä–∞–∑–º–µ—Ç–∫—É WebSite —Å –ø–æ–∏—Å–∫–æ–≤—ã–º –ø–æ–ª–µ–º —Å–∞–π—Ç–∞.',
                priority: 'info',
                impact: 4,
                category: 'seo'
            });
        }

        // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
        if (!analyses.structure.header.exists) {
            recommendations.push({
                id: 'tech-no-header',
                title: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π header',
                description: '–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–µ–≥ header –¥–ª—è —à–∞–ø–∫–∏ —Å–∞–π—Ç–∞.',
                suggestion: '–ó–∞–º–µ–Ω–∏—Ç–µ div –Ω–∞ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ–≥ header –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏.',
                priority: 'warning',
                impact: 6,
                category: 'semantics'
            });
        }

        if (!analyses.structure.main.exists) {
            recommendations.push({
                id: 'tech-no-main',
                title: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π main',
                description: '–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–µ–≥ main –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.',
                suggestion: '–û–±–µ—Ä–Ω–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç –≤ —Ç–µ–≥ main –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∏ SEO.',
                priority: 'warning',
                impact: 6,
                category: 'semantics'
            });
        }

        if (!analyses.structure.nav.exists) {
            recommendations.push({
                id: 'tech-no-nav',
                title: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è',
                description: '–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–µ–≥ nav –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤.',
                suggestion: '–û–±–µ—Ä–Ω–∏—Ç–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –º–µ–Ω—é –≤ —Ç–µ–≥ nav.',
                priority: 'info',
                impact: 5,
                category: 'semantics'
            });
        }

        // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        const perf = analyses.performance;
        if (perf.scripts.sync > 5) {
            recommendations.push({
                id: 'tech-too-many-sync-scripts',
                title: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤',
                description: `–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ ${perf.scripts.sync} —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –±–ª–æ–∫–∏—Ä—É—é—Ç –∑–∞–≥—Ä—É–∑–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã.`,
                suggestion: '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞—Ç—Ä–∏–±—É—Ç—ã async –∏–ª–∏ defer –¥–ª—è –Ω–µ–∫—Ä–∏—Ç–∏—á–Ω—ã—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤.',
                priority: 'warning',
                impact: 7,
                category: 'performance'
            });
        }

        if (perf.images.count > 0 && perf.images.lazy / perf.images.count < 0.3) {
            recommendations.push({
                id: 'tech-no-lazy-images',
                title: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å lazy loading',
                description: `–¢–æ–ª—å–∫–æ ${Math.round((perf.images.lazy / perf.images.count) * 100)}% –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É—é—Ç lazy loading.`,
                suggestion: '–î–æ–±–∞–≤—å—Ç–µ loading="lazy" –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∏–∂–µ —Å–≥–∏–±–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã.',
                priority: 'warning',
                impact: 6,
                category: 'performance'
            });
        }

        // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        if (!analyses.security.csp.exists) {
            recommendations.push({
                id: 'tech-no-csp',
                title: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç Content Security Policy',
                description: 'CSP –ø–æ–º–æ–≥–∞–µ—Ç –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å XSS –∞—Ç–∞–∫–∏, –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—è –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤.',
                suggestion: '–ù–∞—Å—Ç—Ä–æ–π—Ç–µ Content Security Policy –∑–∞–≥–æ–ª–æ–≤–æ–∫, –Ω–∞—á–Ω–∏—Ç–µ —Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.',
                priority: 'warning',
                impact: 7,
                category: 'security'
            });
        }

        const insecureForms = analyses.security.forms.count - analyses.security.forms.secure;
        if (insecureForms > 0) {
            recommendations.push({
                id: 'tech-insecure-forms',
                title: '–ù–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Ñ–æ—Ä–º—ã',
                description: `${insecureForms} —Ñ–æ—Ä–º –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ –Ω–µ–∑–∞—â–∏—â–µ–Ω–Ω–æ–º—É –ø—Ä–æ—Ç–æ–∫–æ–ª—É.`,
                suggestion: '–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ —Ñ–æ—Ä–º—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç HTTPS –≤ –∞—Ç—Ä–∏–±—É—Ç–µ action.',
                priority: 'critical',
                impact: 9,
                category: 'security'
            });
        }

        // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –º–µ—Ç–∞-—Ç–µ–≥–∞–º
        if (!analyses.metaTags.hasOG) {
            recommendations.push({
                id: 'tech-no-og',
                title: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç Open Graph —Ä–∞–∑–º–µ—Ç–∫–∞',
                description: '–ù–µ—Ç –º–µ—Ç–∞-—Ç–µ–≥–æ–≤ Open Graph –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö.',
                suggestion: '–î–æ–±–∞–≤—å—Ç–µ –æ—Å–Ω–æ–≤–Ω—ã–µ Open Graph —Ç–µ–≥–∏: og:title, og:description, og:image, og:url.',
                priority: 'warning',
                impact: 6,
                category: 'social',
                examples: '<meta property="og:title" content="–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã">'
            });
        }

        if (!analyses.metaTags.basic.viewport) {
            recommendations.push({
                id: 'tech-no-viewport',
                title: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç viewport meta —Ç–µ–≥',
                description: '–ë–µ–∑ viewport —Ç–µ–≥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –º–æ–∂–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö.',
                suggestion: '–î–æ–±–∞–≤—å—Ç–µ viewport meta —Ç–µ–≥ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö.',
                priority: 'warning',
                impact: 7,
                category: 'mobile',
                examples: '<meta name="viewport" content="width=device-width, initial-scale=1.0">'
            });
        }

        // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å–∫—Ä–∏–ø—Ç–∞–º
        if (analyses.scripts.inline > 5) {
            recommendations.push({
                id: 'tech-too-many-inline-scripts',
                title: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ inline —Å–∫—Ä–∏–ø—Ç–æ–≤',
                description: `–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ ${analyses.scripts.inline} inline —Å–∫—Ä–∏–ø—Ç–æ–≤, —á—Ç–æ –º–æ–∂–µ—Ç –∑–∞–º–µ–¥–ª–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É.`,
                suggestion: '–í—ã–Ω–µ—Å–∏—Ç–µ JavaScript –≤–æ –≤–Ω–µ—à–Ω–∏–µ —Ñ–∞–π–ª—ã –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.',
                priority: 'info',
                impact: 5,
                category: 'performance'
            });
        }

        // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å—Å—ã–ª–∫–∞–º
        if (!analyses.links.hasCanonical) {
            recommendations.push({
                id: 'tech-no-canonical',
                title: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç canonical —Å—Å—ã–ª–∫–∞',
                description: '–ù–µ—Ç –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–æ–π —Å—Å—ã–ª–∫–∏, —á—Ç–æ –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç–∞.',
                suggestion: '–î–æ–±–∞–≤—å—Ç–µ canonical —Å—Å—ã–ª–∫—É –¥–ª—è —É–∫–∞–∑–∞–Ω–∏—è –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã.',
                priority: 'warning',
                impact: 6,
                category: 'seo',
                examples: '<link rel="canonical" href="https://example.com/page">'
            });
        }

        // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
        const accessibility = analyses.accessibility;
        if (accessibility.images.total > 0) {
            const altRatio = accessibility.images.withAlt / accessibility.images.total;
            if (altRatio < 0.8) {
                recommendations.push({
                    id: 'tech-low-alt-coverage',
                    title: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ALT —Ç–µ–∫—Å—Ç–æ–≤ —É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π',
                    description: `–¢–æ–ª—å–∫–æ ${Math.round(altRatio * 100)}% –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–º–µ—é—Ç ALT —Ç–µ–∫—Å—Ç.`,
                    suggestion: '–î–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω—ã–µ ALT —Ç–µ–∫—Å—Ç—ã –∫–æ –≤—Å–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º.',
                    priority: 'warning',
                    impact: 6,
                    category: 'accessibility'
                });
            }
        }

        if (accessibility.forms.total > 0) {
            const labelsRatio = accessibility.forms.withLabels / accessibility.forms.total;
            if (labelsRatio < 0.8) {
                recommendations.push({
                    id: 'tech-low-labels-coverage',
                    title: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ label —É –ø–æ–ª–µ–π —Ñ–æ—Ä–º',
                    description: `–¢–æ–ª—å–∫–æ ${Math.round(labelsRatio * 100)}% —Ñ–æ—Ä–º –∏–º–µ—é—Ç —Å–≤—è–∑–∞–Ω–Ω—ã–µ label.`,
                    suggestion: '–î–æ–±–∞–≤—å—Ç–µ label –∫–æ –≤—Å–µ–º –ø–æ–ª—è–º –≤–≤–æ–¥–∞ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏.',
                    priority: 'warning',
                    impact: 6,
                    category: 'accessibility'
                });
            }
        }

        // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º—É SEO
        const seo = analyses.seo;
        if (!seo.canonical.exists) {
            recommendations.push({
                id: 'tech-seo-no-canonical',
                title: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç canonical URL',
                description: '–ù–µ —É–∫–∞–∑–∞–Ω–∞ –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–∞—è –≤–µ—Ä—Å–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –ø–æ–∏—Å–∫–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º.',
                suggestion: '–î–æ–±–∞–≤—å—Ç–µ —Ç–µ–≥ canonical –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞.',
                priority: 'warning',
                impact: 7,
                category: 'seo'
            });
        }

        if (!seo.robots.exists) {
            recommendations.push({
                id: 'tech-seo-no-robots',
                title: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç robots meta —Ç–µ–≥',
                description: '–ù–µ —É–∫–∞–∑–∞–Ω—ã –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –ø–æ–∏—Å–∫–æ–≤—ã—Ö —Ä–æ–±–æ—Ç–æ–≤.',
                suggestion: '–î–æ–±–∞–≤—å—Ç–µ robots meta —Ç–µ–≥ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ –∏ —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –ø–æ —Å—Å—ã–ª–∫–∞–º.',
                priority: 'info',
                impact: 4,
                category: 'seo',
                examples: '<meta name="robots" content="index, follow">'
            });
        }

        // –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if (overallScore >= 90) {
            recommendations.push({
                id: 'tech-excellent',
                title: '–û—Ç–ª–∏—á–Ω–∞—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è',
                description: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å–∞–π—Ç–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª—É—á—à–∏–º –ø—Ä–∞–∫—Ç–∏–∫–∞–º.',
                suggestion: '–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≤—ã—Å–æ–∫–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã –Ω–∞ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö.',
                priority: 'info',
                impact: 2,
                category: 'maintenance'
            });
        }

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É –∏ –≤–ª–∏—è–Ω–∏—é
        return recommendations.sort((a, b) => {
            const priorityOrder = { critical: 0, warning: 1, info: 2 };
            if (priorityOrder[a.priority] !== priorityOrder[b.priority]) {
                return priorityOrder[a.priority] - priorityOrder[b.priority];
            }
            return b.impact - a.impact;
        });
    }
}