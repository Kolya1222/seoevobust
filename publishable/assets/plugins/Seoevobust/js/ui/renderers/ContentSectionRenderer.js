export default class ContentSectionRenderer {
    render(content, meta) {
        const images = content?.images || {};
        const links = content?.links || {};
        const textAnalysis = content?.text?.textAnalysis || {};
        const headings = content?.headings || {};
        const readability = content?.readability || {};
        const keywords = content?.keywords || {};
        const multimedia = content?.multimedia || {};
        const structure = content?.structure || {};

        return `
            <h4>üìù –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞</h4>
            
            <!-- –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ -->
            <div class="content-stats">
                <div class="stat-item">
                    <div class="stat-value">${textAnalysis.contentWords || 0}</div>
                    <div class="stat-label">–°–ª–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞</div>
                </div>
                <div class="stat-item">
                    <div class="stat-value">${textAnalysis.readingTime || 0} –º–∏–Ω</div>
                    <div class="stat-label">–í—Ä–µ–º—è —á—Ç–µ–Ω–∏—è</div>
                </div>
                <div class="stat-item">
                    <div class="stat-value">${readability.score || 0}/100</div>
                    <div class="stat-label">–ß–∏—Ç–∞–µ–º–æ—Å—Ç—å</div>
                </div>
                <div class="stat-item">
                    <div class="stat-value">${content?.score || 0}%</div>
                    <div class="stat-label">–û–±—â–∏–π –±–∞–ª–ª</div>
                </div>
            </div>
            
            <!-- –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ -->
            <div class="metrics-grid">
                ${this.renderMetricCard('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å ALT', `${images.altPercentage || 0}%`, 
                    `${images.withAlt || 0}/${images.total || 0}`, images.altPercentage > 80)}
                
                ${this.renderMetricCard('Lazy Loading', `${images.lazyPercentage || 0}%`, 
                    `${images.lazyLoaded || 0}/${images.total || 0}`, images.lazyPercentage > 50)}
                
                ${this.renderMetricCard('–°—Å—ã–ª–∫–∏ —Å title', `${links.titlePercentage || 0}%`, 
                    `${links.withTitle || 0}/${links.total || 0}`, links.titlePercentage > 50)}
                
                ${this.renderMetricCard('–ë–∏—Ç—ã–µ —Å—Å—ã–ª–∫–∏', `${links.brokenPercentage || 0}%`, 
                    `${links.brokenLinks || 0}/${links.total || 0}`, links.brokenPercentage < 10)}
                
                ${this.renderMetricCard('H2 –∑–∞–≥–æ–ª–æ–≤–∫–∏', headings.h2?.count || 0, 
                    '–°—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã', headings.h2?.count > 0)}
                
                ${this.renderMetricCard('–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Å—Å—ã–ª–∫–∏', links.internal || 0, 
                    `${Math.round((links.internal / links.total) * 100) || 0}% –æ—Ç –≤—Å–µ—Ö`, links.internal > 0)}
            </div>
            
            <!-- –î–µ—Ç–∞–ª—å–Ω—ã–µ —Å–µ–∫—Ü–∏–∏ -->
            <div class="detailed-sections">
                ${this.renderHeadingsSection(headings)}
                ${this.renderReadabilitySection(readability, textAnalysis)}
                ${this.renderLinksSection(links)}
                ${this.renderImagesSection(images)}
                ${this.renderKeywordsSection(keywords)}
                ${this.renderMultimediaSection(multimedia)}
                ${this.renderStructureSection(structure)}
            </div>
            
            ${this.renderOpenGraphSection(meta)}
        `;
    }

    renderMetricCard(label, value, details, isGood) {
        const className = isGood ? 'good' : 'warning';
        return `
            <div class="metric-card ${className}">
                <div class="metric-value">${value}</div>
                <div class="metric-label">${label}</div>
                <div class="metric-details">${details}</div>
            </div>
        `;
    }

    renderHeadingsSection(headings) {
        if (!headings.hierarchy || headings.hierarchy.length === 0) {
            return '<div class="section-card warning">–ù–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ</div>';
        }

        let html = `
            <div class="section-card">
                <h5>üìë –ò–µ—Ä–∞—Ä—Ö–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤</h5>
                <div class="headings-hierarchy ${headings.validHierarchy ? 'valid' : 'invalid'}">
                    <div class="hierarchy-status">
                        ${headings.validHierarchy ? '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –∏–µ—Ä–∞—Ä—Ö–∏—è' : '‚ö†Ô∏è –ù–∞—Ä—É—à–µ–Ω–∞ –∏–µ—Ä–∞—Ä—Ö–∏—è'}
                    </div>
                    <div class="hierarchy-levels">
        `;

        headings.hierarchy.forEach(level => {
            const heading = headings[level];
            html += `
                <div class="hierarchy-item">
                    <span class="level-tag">${level.toUpperCase()}</span>
                    <span class="level-count">${heading.count} —à—Ç</span>
                    <span class="level-avg">~${heading.avgLength} —Å–∏–º–≤.</span>
                </div>
            `;
        });

        html += `
                    </div>
                </div>
            </div>
        `;

        return html;
    }

    renderReadabilitySection(readability, textAnalysis) {
        return `
            <div class="section-card">
                <h5>üìñ –ê–Ω–∞–ª–∏–∑ —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏</h5>
                <div class="readability-info">
                    <div class="readability-score ${readability.score > 60 ? 'good' : 'warning'}">
                        <div class="score-value">${readability.score}/100</div>
                        <div class="score-label">${readability.level}</div>
                    </div>
                    <div class="readability-details">
                        <div>–°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: <strong>${readability.avgWordsPerSentence} —Å–ª–æ–≤</strong></div>
                        <div>–°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ —Å–ª–æ–≤–∞: <strong>${readability.avgCharsPerWord} —Å–∏–º–≤.</strong></div>
                        <div>–ê–±–∑–∞—Ü–µ–≤: <strong>${textAnalysis.paragraphs || 0}</strong></div>
                        <div>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: <strong>${textAnalysis.sentences || 0}</strong></div>
                    </div>
                </div>
            </div>
        `;
    }

    renderLinksSection(links) {
        return `
            <div class="section-card">
                <h5>üîó –ê–Ω–∞–ª–∏–∑ —Å—Å—ã–ª–æ–∫</h5>
                <div class="links-distribution">
                    <div class="link-type">
                        <span class="type-label">–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ:</span>
                        <span class="type-value">${links.internal || 0} (${Math.round((links.internal / links.total) * 100) || 0}%)</span>
                    </div>
                    <div class="link-type">
                        <span class="type-label">–í–Ω–µ—à–Ω–∏–µ:</span>
                        <span class="type-value">${links.external || 0} (${Math.round((links.external / links.total) * 100) || 0}%)</span>
                    </div>
                    <div class="link-type">
                        <span class="type-label">Nofollow:</span>
                        <span class="type-value">${links.withRel || 0} (${links.nofollowPercentage || 0}%)</span>
                    </div>
                </div>
            </div>
        `;
    }

    renderImagesSection(images) {
        const formats = Object.entries(images.formats || {})
            .map(([format, count]) => `${format}: ${count}`)
            .join(', ');

        return `
            <div class="section-card">
                <h5>üñºÔ∏è –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π</h5>
                <div class="images-stats">
                    <div>–í—Å–µ–≥–æ: <strong>${images.total || 0}</strong></div>
                    <div>–° —Ä–∞–∑–º–µ—Ä–∞–º–∏: <strong>${images.withDimensions || 0} (${images.dimensionsPercentage || 0}%)</strong></div>
                    <div>–ë–æ–ª—å—à–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: <strong>${images.largeImages || 0}</strong></div>
                    <div>–§–æ—Ä–º–∞—Ç—ã: <strong>${formats || '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã'}</strong></div>
                </div>
            </div>
        `;
    }

    renderKeywordsSection(keywords) {
        const topWords = keywords.topWords?.slice(0, 5) || [];
        
        return `
            <div class="section-card">
                <h5>üî§ –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞</h5>
                <div class="keywords-list">
                    ${topWords.length > 0 ? 
                        topWords.map(word => `
                            <div class="keyword-item">
                                <span class="keyword">${word.word}</span>
                                <span class="keyword-count">${word.count}</span>
                            </div>
                        `).join('') :
                        '<div class="no-data">–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞</div>'
                    }
                </div>
                <div class="keywords-meta">
                    –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–ª–æ–≤: ${keywords.uniqueWords || 0}
                </div>
            </div>
        `;
    }

    renderMultimediaSection(multimedia) {
        if (multimedia.videos === 0 && multimedia.audios === 0 && multimedia.iframes === 0) {
            return '';
        }

        return `
            <div class="section-card">
                <h5>üé¨ –ú—É–ª—å—Ç–∏–º–µ–¥–∏–∞</h5>
                <div class="multimedia-stats">
                    <div>–í–∏–¥–µ–æ: <strong>${multimedia.videos || 0}</strong></div>
                    <div>–ê—É–¥–∏–æ: <strong>${multimedia.audios || 0}</strong></div>
                    <div>–í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç: <strong>${multimedia.iframes || 0}</strong></div>
                </div>
            </div>
        `;
    }

    renderStructureSection(structure) {
        const semanticElements = Object.entries(structure.semantic || {})
            .filter(([_, count]) => count > 0)
            .map(([tag, count]) => `${tag}: ${count}`)
            .join(', ');

        return `
            <div class="section-card">
                <h5>üèóÔ∏è –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã</h5>
                <div class="structure-elements">
                    <div class="structure-item">
                        <span>Header:</span> <strong>${structure.header}</strong>
                    </div>
                    <div class="structure-item">
                        <span>Main:</span> <strong>${structure.main}</strong>
                    </div>
                    <div class="structure-item">
                        <span>Footer:</span> <strong>${structure.footer}</strong>
                    </div>
                    <div class="structure-item">
                        <span>Breadcrumbs:</span> <strong>${structure.breadcrumbs?.exists ? '‚úÖ' : '‚ùå'}</strong>
                    </div>
                </div>
                ${semanticElements ? `
                    <div class="semantic-elements">
                        –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ–≥–∏: <strong>${semanticElements}</strong>
                    </div>
                ` : ''}
            </div>
        `;
    }

    renderOpenGraphSection(meta) {
        if (!meta?.og || Object.keys(meta.og).length === 0) {
            return '<div class="section-card warning">Open Graph —Ç–µ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>';
        }

        return `
            <div class="section-card">
                <h5>üì± Open Graph —Ç–µ–≥–∏</h5>
                <div class="og-tags">
                    ${Object.entries(meta.og).map(([key, value]) => `
                        <div class="og-tag">
                            <span class="og-key">${key}:</span>
                            <span class="og-value">${value || '–ù–µ –∑–∞–¥–∞–Ω'}</span>
                        </div>
                    `).join('')}
                </div>
            </div>
        `;
    }
}